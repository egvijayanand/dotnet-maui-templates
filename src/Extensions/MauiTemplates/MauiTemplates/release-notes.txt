What's new in ver. 4.4.0.0:
---------------------------
1. Templates updated for .NET 8 RTM

2. Incorporated .NET 8 / C# 12 features wherever possible

v4.3.6.0:

Defined custom logic for BlazorWebView XAML item template processing.

v4.3.0.0:

1. Templates updated for .NET 8 RC2

v4.2.2.0:

Reliability enhancement.

v4.2.1.0:

1. Support for Blazor Hybrid in F# project template. Added the Application Design parameter for this.

1.1 This takes two options, Plain and Hybrid. The default value is Plain.

Note: The RCL project in the F# template is C# based as Razor compilation is not working with F# as expected.

2. Option to include reference Shared Toolkit while creating the Shared Class Library project.

3. .NET MAUI Community Toolkit package versions bumped to their latest versions.

v4.1.0.0:

1. Templates updated for .NET 8 RC1

2. Project file enhancements

3. The default value for Framework parameter is now updated as net8.0

v4.0.1.0:

Bug fix in F# template.

v4.0.0.0:

.NET MAUI App F# project template with Fabulous.

In the Create a new project window, select Language as F# and Project type as MAUI to locate the template.

Note: Not all options in C# template are supported in F# template.

v3.6.0.0:

Templates updated for .NET 8 Preview 7.

v3.5.0.0:

1. Templates updated for .NET 8 Preview 6

2. CommunityToolkit.Maui.Maps for the Windows platform now work on .NET 8 as well

Opting for this will include the NuGet package and configure it in the .NET MAUI startup in MauiProgram.cs

v3.4.1.0:

1. Templates updated for .NET 8 Preview 5

2. Added support for the newly released CommunityToolkit.Maui.Maps NuGet package to support the Maps feature on the Windows platform.

2.1 Opting for this will include the NuGet package and configure it in the .NET MAUI startup in MauiProgram.cs

2.2 Update your "Bing Maps API Key" for it to work properly, visit https://www.bingmapsportal.com/ to generate one.

Note: For now, this is supported only on .NET 7. Support for .NET 8 Preview in a future release.

v3.3.2.0:

1. For library projects on .NET 8, explicit package references for Microsoft.Maui.* NuGet packages

2. Made changes in the source files of Hybrid and Reactor project templates

v3.3.0.0:

1. Templates updated for .NET 8 Preview 4

2. On .NET 8, explicit package references for Microsoft.Maui.Controls and Microsoft.Maui.Controls.Compatibility NuGet packages

3. Version # bumped to the latest stable for CommunityToolkit.Maui (v5.1.0) and CommunityToolkit.Mvvm (v8.2.0) NuGet packages

v3.2.4.0:

Fixed the issue of _Imports.razor file getting excluded while creating a project in the Razor design pattern.

v3.2.3.0:

Platforms folder filtered out based on the target platform opted-in for .NET MAUI App and Class Library project.

v3.2.2.0:

Conditionally defined supported platforms properties based on the target platform opted-in for .NET MAUI Class Library as well.

v3.2.1.0:

Templates updated to support .NET 8 Preview 3.

v3.2.0.0:

1. While creating a Blazor Hybrid App, an option to abstract the Razor components as a separate Razor class library

2. While targeting .NET 8, the StartPath property is set to load a Razor component other than the one defined with the default route address of '/'

3. An item template for BlazorWebView in XAML and C#

v3.1.0.0:

1. Added support for Markup, Razor Bindings, Comet, Reactor AppModels in the All-in-One .NET MAUI App project template

2. New Item Templates for Comet, Razor Bindings (Page, View and Shell) and Shell (C#)

3. Removed the explicit C# App project template, instead use the .NET MAUI App template with Design Pattern option selected as Markup for the same feature with more options

v3.0.0.0:

Templates updated to support .NET 8 Preview 1.

v2.4.0.0:

1. CommunityToolkit.Maui.Markup NuGet package bumped to v3.0.0 that supports TypedBindings

2. Introduced an ItemTemplate for C# Class (Partial). Made available in the section titled Code

v2.3.1.0:

CommunityToolkit.Maui.MediaElement NuGet package bumped to v1.0.1 with the explicit WindowsAppSDK reference removed.

v2.3.0.0:

1. Ability to add reference to CommunityToolkit.Maui.MediaElement NuGet package and configure it in startup pipeline for playing audio/video in a .NET MAUI app

2. Dependent packages have been updated to reference latest stable version

CommunityToolkit.Maui - v4.0.0
CommunityToolkit.Mvvm - v8.1.0

v2.2.0.0:

1. Template pack updated to support .NET 7 SR1 (v7.0.52).

2. Base framework is also included as a target (net6.0/net7.0) to .NET MAUI App project template when the target-platform is set to All.

v2.1.3.0:

The target-platform parameter is now updated as a multi-choice value. Can be opted-in according to the need.

And little housekeeping to improve the reliability of the templates.

v2.1.1.1:

1. Template package updated to support newly released .NET 7 NuGet dependencies.

2. For App project targeting .NET 7, option to add and configure Maui Foldable NuGet package.

Note: If the project target .NET 6, selecting the Foldable/Maps option will NOT have any impact.

v2.1.0.0:

Templates have been updated to support .NET 7 GA release.

v2.0.3.0:

1. A parameter named target-platform has been introduced that takes any one of the following values (with All being the default value).

While creating the project within Visual Studio 2022, this would be a dropdown menu in the project creation option.

All - Targets all possible .NET MAUI supported platforms.
Android - Targets Android platform.
iOS - Targets iOS platform.
macOS - Targets macOS platform via Mac Catalyst.
Windows - Targets Windows platform.
Tizen - Targets Tizen platform.
Mobile - Targets Android and iOS platforms.
Desktop - Targets Windows and macOS platforms.
Apple - Targets iOS and macOS platforms.

dotnet new mauiapp --target-platform Mobile

dotnet new mauiapp -tp Android

Templates have been updated to support .NET MAUI on .NET 7 RC2 (Preview release).

Earlier version:

1. A parameter named framework has been introduced that takes either net6.0 or net7.0 as its options (with net7.0 being the default value).

While creating the project within Visual Studio 2022, this would be a dropdown menu in the project creation option.

dotnet new mauiapp --framework net6.0

dotnet new mauiapp -f net7.0

2. For projects targeting .NET 7, option to add and configure Maui Maps NuGet package.

Note: If project targets .NET 6, selecting the Maps option will NOT have any impact.

For other features, refer to this article for more details:

https://egvijayanand.in/2022/04/20/all-in-one-dotnet-maui-app-project-template-what-is-new/
